CREATE CONSTRAINT FOR (u:User) REQUIRE u.twitterId IS UNIQUE;

CALL gds.graph.project('follower_network','User','follows');

:auto LOAD CSV WITH HEADERS FROM "file:///users_following.csv" AS csvLine1
CALL {
WITH csvLine1
MERGE (user:User
 { 
    twitterId: csvLine1.user_id
 })
 ON CREATE SET user.label = csvLine1.label
MERGE (following:User
 { 
    twitterId: csvLine1.following
 })
ON CREATE SET following.label = csvLine1.label
CREATE (user)-[:follows]->(following)
} IN TRANSACTIONS OF 10000 ROWS;

:auto LOAD CSV WITH HEADERS FROM "file:///users_followers.csv" AS csvLine1
CALL {
WITH csvLine1
MERGE (user:User
 { 
    twitterId: csvLine1.user_id
 })
 ON CREATE SET user.label = csvLine1.label
MERGE (follower:User
 { 
    twitterId: csvLine1.followers
 })
  ON CREATE SET follower.label = csvLine1.label
CREATE (follower)-[:follows]->(user)
} IN TRANSACTIONS OF 10000 ROWS;

:auto MATCH (user:User)
WHERE size([(user)-[:follows]->() | user]) + size([(user)<-[:follows]-() | user]) <= 1
with user LIMIT 1000000
CALL { with user
DETACH DELETE user } IN TRANSACTIONS OF 10000 ROWS

:auto MATCH (user:User)
WHERE size([(user)-[:follows]->() | user]) + size([(user)<-[:follows]-() | user]) <= 1
CALL { with user
DETACH DELETE user } IN TRANSACTIONS OF 10000 ROWS

CALL gds.alpha.graph.sample.rwr(
  'follower_network_sampled_with_stratification',
  'follower_network',
  { samplingRatio: 0.3, nodeLabelStratification: True }
);



2 713 356

6 240 964


componentCount	min	max	mean
38	1	2712927	71403.92105263157



nodeProjection	relationshipProjection	graphName	nodeCount	relationshipCount	projectMillis
{
  "User": {
    "label": "User",
    "properties": {

    }
  }
}
{
  "follows": {
    "orientation": "NATURAL",
    "aggregation": "DEFAULT",
    "type": "follows",
    "properties": {

    }
  }
}
"follower_network"	2713356	12660581	12532





:auto CALL apoc.load.json("file:///users_followers.json")
YIELD value
CALL {
WITH value
UNWIND value.users_followers AS user_followers
CREATE (u: User {twitterId: user_followers.user_id})
} IN TRANSACTIONS OF 10000 ROWS;

:auto CALL apoc.load.json("file:///users_followers.json")
YIELD value
CALL {
WITH value
UNWIND value.users_followers AS user_followers
WITH user_followers
UNWIND user_followers.followers as follower_id
MERGE (follower: User {twitterId: follower_id })
} IN TRANSACTIONS OF 10000 ROWS;






CREATE CONSTRAINT FOR (u:User) REQUIRE u.twitterId IS UNIQUE;

:auto LOAD CSV WITH HEADERS FROM "file:///users_followers.csv" AS csvLine1
CALL {
WITH csvLine1
MERGE (user:User
 { 
    twitterId: csvLine1.user_id
 })
MERGE (follower:User
 { 
    twitterId: csvLine1.followers
 })
CREATE (follower)-[:follows]->(user)
} IN TRANSACTIONS OF 10000 ROWS;


:auto LOAD CSV WITH HEADERS FROM "file:///users_following.csv" AS csvLine1
CALL {
WITH csvLine1
MERGE (user:User
 { 
    twitterId: csvLine1.user_id
 })
MERGE (following:User
 { 
    twitterId: csvLine1.following
 })
CREATE (user)-[:follows]->(following)
} IN TRANSACTIONS OF 10000 ROWS;


:auto LOAD CSV WITH HEADERS FROM "file:///profiles_to_label.csv" AS csvLine1
CALL {
WITH csvLine1
MATCH (user:User
 { 
    twitterId: csvLine1.user_id
 })
SET user.label = csvLine1.label
} IN TRANSACTIONS OF 10000 ROWS;



:auto LOAD CSV WITH HEADERS FROM "file:///users_followers.csv" AS csvLine1
CALL {
WITH csvLine1
MERGE (user:User
 { 
    twitterId: csvLine1.user_id
 })
 ON CREATE SET user.label = csvLine1.label
MERGE (follower:User
 { 
    twitterId: csvLine1.followers
 })
  ON CREATE SET follower.label = csvLine1.label
CREATE (follower)-[:follows]->(user)
} IN TRANSACTIONS OF 10000 ROWS;




YIELD value
WITH value
UNWIND value.users_followers AS user_followers
MERGE (u: User {twitterId: user_followers.user_id})
WITH user_followers, u
UNWIND user_followers.followers as follower_id
MERGE (follower: User {twitterId: follower_id })

:auto CALL apoc.load.json("file:///users_followers.json")
YIELD value
CALL {
WITH value
UNWIND value.users_followers AS user_followers
MERGE (u: User {twitterId: user_followers.user_id})
WITH user_followers, u
UNWIND user_followers.followers as follower_id
MERGE (follower: User {twitterId: follower_id })} IN TRANSACTIONS OF 10000 ROWS;

MERGE (follower)-[:follows]->(u)